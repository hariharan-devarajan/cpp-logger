# This will create IMPORTED targets for Cpp_logger. The executables will be
# cpp-logger::<exe-name>-bin (e.g., cpp-logger::cpp-logger-bin) and the library will
# be cpp-logger::cpp-logger.

include("${CMAKE_CURRENT_LIST_DIR}/cpp-logger-config-version.cmake")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
list(APPEND CMAKE_MODULE_PATH "@EXTRA_CMAKE_MODULE_DIR@")

#include(GNUInstallDirs)
include(ExternalProject)
include(cpp-logger-utils)
include(CMakePackageConfigHelpers)


set(CPP_LOGGER_VERSION ${PACKAGE_VERSION})

# Record compiler information
set(CPP_LOGGER_C_COMPILER "@CMAKE_C_COMPILER@")
set(CPP_LOGGER_CXX_COMPILER "@CMAKE_CXX_COMPILER@")

set(CPP_LOGGER_C_FLAGS "@CMAKE_C_FLAGS@")
set(CPP_LOGGER_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

set(CPP_LOGGER_C_STANDARD "@CMAKE_C_STANDARD@")
set(CPP_LOGGER_CXX_STANDARD "@CMAKE_CXX_STANDARD@")

set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# Record the various flags and switches accumlated in CPP_LOGGER
set(CPP_LOGGER_GNU_LINUX @CPP_LOGGER_GNU_LINUX@)

# Setup dependencies


@PACKAGE_INIT@

# Now actually import the CPP_LOGGER target
set(_TMP_INCLUDE_DIRS "@CPP_LOGGER_INSTALL_INCLUDE_DIR@")
foreach (_DIR ${_TMP_INCLUDE_DIRS})
  set_and_check(_INCLUDE_DIR "${_DIR}")
  list(APPEND CPP_LOGGER_INCLUDE_DIRS "${_INCLUDE_DIR}")
endforeach (_DIR "${_TMP_INCLUDE_DIRS}")

set(_TMP_LIBRARY_DIRS "@CPP_LOGGER_INSTALL_LIB_DIR@")
foreach (_DIR ${_TMP_LIBRARY_DIRS})
  set_and_check(_LIBRARY_DIR "${_DIR}")
  list(APPEND CPP_LOGGER_LIBRARY_DIRS "${_LIBRARY_DIR}")
endforeach (_DIR ${_TMP_LIBRARY_DIRS})

if (NOT TARGET cpp-logger::cpp-logger)
  include(${CMAKE_CURRENT_LIST_DIR}/cpp-logger-targets.cmake)
endif (NOT TARGET cpp-logger::cpp-logger)

check_required_components(cpp-logger)

set(CPP_LOGGER_LIBRARIES cpp-logger)